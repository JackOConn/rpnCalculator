9/10

- This follows on from the note in v1, the way you dispatch to sub-methods is a good start to more readable code, though it is doubling the number of times you need switch or case statements making it even more complex, not less.

	For example, whith this:

  	if (op == "+" || op == "-" || op == "*" || op == "/" || op == "%") {
            PushArithmeticResult(firstValue, secondValue, op);
        }

	Then in PushArithmeticResult() you have a switch statement with the same string comparisons. 

	Think of ways you could rewrite the execute() method to do some common checking and then 'dispatch' to the appropriate function to do the work for the operation chosen. One idea is to use a Map to map Strings (operators) to Methods. Take a look at this question on Stack Overflow for the general idea: https://stackoverflow.com/questions/2745796/how-can-i-map-a-string-to-a-function-in-java. Something like this could shring your growing function and possibly stop it at a handful of lines that never need to be touched again.

- After that, you can start thinking about how each group of related operations are modules and how you could factor them out of the main or core part of your engine. Do that in a way that the core is open for extension but closed for modification (open-closed principle).